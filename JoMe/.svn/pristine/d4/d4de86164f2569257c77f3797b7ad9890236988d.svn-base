package com.example.event_app;

import java.util.ArrayList;
import android.app.Activity;
import android.app.ProgressDialog;
import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.connection.Connection;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;


public class add_venue extends Activity implements LocationListener, LoaderCallbacks<Cursor> {

	Button 	btnCross,search;
	double lat;
	double lng;
	Location location;
	LocationManager lm;
	String provider;
	EditText edtSearch;
	private ProgressDialog _Progress;
	public static ArrayList<LocationInfo> mLocationInfo;;
	
	  private static LatLng fromPosition = null;
	  private static LatLng toPosition = null;
	  
	  GoogleMap mGoogleMap;
	  
//	  private static final LatLng BROOKLYN_BRIDGE = new LatLng(40.7057, -73.9964);


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.add_venue);
		btnCross = (Button) findViewById(R.id.btnCrose);
		
		// Cross button coding
		btnCross.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent itCrose = new Intent(getApplicationContext(),
						CreateEventPage1.class);
				startActivity(itCrose);
			}
		});
		// ---end of cross button
		
		
		lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, this);
		Criteria c = new Criteria();
		
		 // Getting the name of the provider that meets the criteria
        provider = lm.getBestProvider(c, false);
 
        if(provider!=null && !provider.equals("")){
 
            // Get the location from the given provider
            Location location = lm.getLastKnownLocation(provider);
 
            lm.requestLocationUpdates(provider, 20000, 1, this);
 
            if(location!=null)
                onLocationChanged(location);
            else
                Toast.makeText(getBaseContext(), "Location can't be retrieved", Toast.LENGTH_SHORT).show();
 
        }else{
            Toast.makeText(getBaseContext(), "No Provider Found", Toast.LENGTH_SHORT).show();
        }
        GoogleMap map;
      
		map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map))
				.getMap();
		map.addMarker(new MarkerOptions().position(new LatLng(lat, lng)).title(
				"current location"));
		
		handleIntent(getIntent());	
		
		CameraPosition INIT =
	            new CameraPosition.Builder()
	            .target(new LatLng(19.0222, 72.8666))
	            .zoom(17.5F)
	            .bearing(300F) // orientation
	            .tilt( 50F) // viewing angle
	            .build();
		
		 map.moveCamera( CameraUpdateFactory.newCameraPosition(INIT) );
		
//		map.moveCamera(CameraUpdateFactory.newLatLngZoom(
//				provider, 13));
		
		/*CameraPosition cameraPosition = new CameraPosition.Builder().zoom(14.0f).build();
		CameraUpdate cameraUpdate = CameraUpdateFactory.newCameraPosition(cameraPosition);
		map.moveCamera(cameraUpdate);*/
		
	 	  
		
	        
		
		search=(Button)findViewById(R.id.search);
		search.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View arg0) {
					
					
					if(edtSearch.isShown()){
						edtSearch.setVisibility(View.GONE);
					}
					else{
						edtSearch.setVisibility(View.VISIBLE);
					}
				}
			});
		
	 }
	
	
	private void handleIntent(Intent intent){
		if(intent.getAction().equals(Intent.ACTION_SEARCH)){
			doSearch(intent.getStringExtra(SearchManager.QUERY));
		}else if(intent.getAction().equals(Intent.ACTION_VIEW)){
			getPlace(intent.getStringExtra(SearchManager.EXTRA_DATA_KEY));
		}
		
	}
	
	@Override
	protected void onNewIntent(Intent intent) {		
		super.onNewIntent(intent);
		setIntent(intent);
		handleIntent(intent);
	}
	
	private void doSearch(String query){		
		Bundle data = new Bundle();
		data.putString("query", query);		
//		getSupportLoaderManager().restartLoader(0, data, this);
	}
	
	private void getPlace(String query){		
		Bundle data = new Bundle();
		data.putString("query", query);		
//		getSupportLoaderManager().restartLoader(1, data, this);
	}
	
	

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	
	@Override
	public boolean onMenuItemSelected(int featureId, MenuItem item) {
		switch(item.getItemId()){
			case R.id.search:	
				onSearchRequested();
				break;
		}	
		return super.onMenuItemSelected(featureId, item);
	}

	@Override
	public Loader<Cursor> onCreateLoader(int arg0, Bundle query) {
		CursorLoader cLoader = null;
		if(arg0==0)
			cLoader = new CursorLoader(getBaseContext(), PlaceProvider.SEARCH_URI, null, null, new String[]{ query.getString("query") }, null);
		else if(arg0==1)
			cLoader = new CursorLoader(getBaseContext(), PlaceProvider.DETAILS_URI, null, null, new String[]{ query.getString("query") }, null);
		return cLoader;
		
	}

	@Override
	public void onLoadFinished(Loader<Cursor> arg0, Cursor c) {	
		showLocations(c);		
	}

	@Override
	public void onLoaderReset(Loader<Cursor> arg0) {
		// TODO Auto-generated method stub		
	}
	
	private void showLocations(Cursor c){
		MarkerOptions markerOptions = null;
		LatLng position = null;
		mGoogleMap.clear();
		while(c.moveToNext()){
			markerOptions = new MarkerOptions();
			position = new LatLng(Double.parseDouble(c.getString(1)),Double.parseDouble(c.getString(2)));
			markerOptions.position(position);
			markerOptions.title(c.getString(0));
			mGoogleMap.addMarker(markerOptions);
		}
		if(position!=null){
			CameraUpdate cameraPosition = CameraUpdateFactory.newLatLng(position);
			mGoogleMap.animateCamera(cameraPosition);			
		}
	}		

	
	public boolean onMarkerClick(Marker marker) {
		  Log.i("add_venue", "onMarkerClick");
		  Toast.makeText(getApplicationContext(),
		      "Marker Clicked: " + marker.getTitle(), Toast.LENGTH_LONG)
		      .show();
		  return false;
		}
	
	public void onMarkerDrag(Marker marker) {
	  // do nothing during drag
	}
	 
	public void onMarkerDragEnd(Marker marker) {
	  toPosition = marker.getPosition();
	  Toast.makeText(
	      getApplicationContext(),
	      "Marker " + marker.getTitle() + " dragged from " + fromPosition
	          + " to " + toPosition, Toast.LENGTH_LONG).show();
	 
	}
	 
	public void onMarkerDragStart(Marker marker) {
	  fromPosition = marker.getPosition();
	  Log.d(getClass().getSimpleName(), "Drag start at: " + fromPosition);
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		lat = location.getLatitude();
		lng = location.getLongitude();
		String str = Double.toString(lat);
		String str1 = Double.toString(lng);
		Toast.makeText(getApplicationContext(), str, 0).show();
		Toast.makeText(getApplicationContext(), str1, 0).show();
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub

	}
	
	
	
	
}
