package com.example.event_app;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.facebook.AppEventsLogger;
import com.facebook.HttpMethod;
import com.facebook.LoggingBehavior;
import com.facebook.Request;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionLoginBehavior;
import com.facebook.SessionState;
import com.facebook.Settings;
import com.facebook.UiLifecycleHelper;
import com.facebook.model.GraphObject;
import com.facebook.model.GraphUser;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.TextView;


public class login_fb extends Activity {
	private Session.StatusCallback statusCallback = new SessionStatusCallback();
	TextView txt;
	String token,url1;
	String fb_ids="";
	Response responsefriends;
	private static final int PICK_FRIENDS_ACTIVITY = 1;
	
	  private UiLifecycleHelper lifecycleHelper;
	  boolean pickFriendsWhenSessionOpened;
	@Override
	  public void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    setContentView(R.layout.login_fb);
txt=(TextView)findViewById(R.id.textView1_facebooklogin);

Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
	    Session session = Session.getActiveSession();
		if (session == null) {
			if (savedInstanceState != null) {
				session = Session.restoreSession(this, null, statusCallback,
						savedInstanceState);
			}
			if (session == null) {
				session = new Session(this);
			}
			Session.setActiveSession(session);
			if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {

			
				 System.out.println("main ");
				session.openForRead(new Session.OpenRequest(this)
						.setCallback(statusCallback));
				
				System.out.println("already logined");
				token=session.getAccessToken();
				System.out.println("token"+token);
				System.out.println(session);
				
				
			}
		}
	    txt.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
			
				Session.OpenRequest request = new Session.OpenRequest(login_fb.this);
				request.setPermissions(Arrays.asList("user_about_me","user_interests"));
				request.setLoginBehavior(SessionLoginBehavior.SUPPRESS_SSO);
				request.setCallback(statusCallback );

				// get active session
				Session mFacebookSession = Session.getActiveSession();
				if (mFacebookSession == null || mFacebookSession.isClosed()) 
				{
				    mFacebookSession = new Session(login_fb.this);
				}
				mFacebookSession.openForRead(request);
			}
		} );
	    
	    lifecycleHelper = new UiLifecycleHelper(this, new Session.StatusCallback() {
            @Override
            public void call(Session session, SessionState state, Exception exception) {
                onSessionStateChanged(session, state, exception);
            }
        });
        lifecycleHelper.onCreate(savedInstanceState);

        ensureOpenSession();
	    
	   
	  }
	@Override
	public void onStart() {
		super.onStart();
		Session.getActiveSession().addCallback(statusCallback);
		 displaySelectedFriends(RESULT_OK);
	}

	

	
	    

	@Override
	public void onStop() {
		super.onStop();
		Session.getActiveSession().removeCallback(statusCallback);
	}

	  @Override
	  public void onActivityResult(int requestCode, int resultCode, Intent data) {

		  super.onActivityResult(requestCode, resultCode, data);
		    if (Session.getActiveSession() != null)
		        Session.getActiveSession().onActivityResult(this, requestCode,
		                resultCode, data);

		    Session currentSession = Session.getActiveSession();
		    if (currentSession == null || currentSession.getState().isClosed()) {
		        Session session = new Session.Builder(login_fb.this).build();
		        Session.setActiveSession(session);
		        currentSession = session;
		    }

		    if (currentSession.isOpened()) {
		        Session.openActiveSession(this, true, new Session.StatusCallback() {

		            @Override
		            public void call(final Session session, SessionState state,
		                    Exception exception) {

		                if (session.isOpened()) {
		               
		                }
		            }
		        });
		    }
//		  --------------------   written by archana................   
		    switch (requestCode) {
            case PICK_FRIENDS_ACTIVITY:
                displaySelectedFriends(resultCode);
                break;
            default:
                Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
                break;
        }
//		    -------------------------------------------------------------------------
	  }
	  
//		---------------------------------  Pick Friend Code By Archana -------------------------------------------
		
	  /*	  @Override
	  	    protected void onStart() {
	  	        super.onStart();

	  	        // Update the display every time we are started.
	  	        displaySelectedFriends(RESULT_OK);
	  	    }*/

	  	    @Override
	  	    protected void onResume() {
	  	        super.onResume();

	  	        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
	  	        // the onResume methods of the primary Activities that an app may be launched into.
	  	        AppEventsLogger.activateApp(this);
	  	    }
	  /*
	  	    public void onActivityResult(int requestCode, int resultCode, Intent data) {
	  	        switch (requestCode) {
	  	            case PICK_FRIENDS_ACTIVITY:
	  	                displaySelectedFriends(resultCode);
	  	                break;
	  	            default:
	  	                Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
	  	                break;
	  	        }
	  	    }*/

	  	    private boolean ensureOpenSession() {
	  	        if (Session.getActiveSession() == null ||
	  	                !Session.getActiveSession().isOpened()) {
	  	            Session.openActiveSession(this, true, new Session.StatusCallback() {
	  	                @Override
	  	                public void call(Session session, SessionState state, Exception exception) {
	  	                    onSessionStateChanged(session, state, exception);
	  	                }
	  	            });
	  	            return false;
	  	        }
	  	        return true;
	  	    }

	  	    private void onSessionStateChanged(Session session, SessionState state, Exception exception) {
	  	        if (pickFriendsWhenSessionOpened && state.isOpened()) {
	  	            pickFriendsWhenSessionOpened = false;

	  	            startPickFriendsActivity();
	  	        }
	  	    }

	  	    private void displaySelectedFriends(int resultCode) {
	  	        String results = "";
	  	        FriendPickerApplication application = (FriendPickerApplication) getApplication();

	  	        Collection<GraphUser> selection = application.getSelectedUsers();
	  	        if (selection != null && selection.size() > 0) {
	  	            ArrayList<String> names = new ArrayList<String>();
	  	            for (GraphUser user : selection) {
	  	                names.add(user.getName());
	  	            }
	  	            results = TextUtils.join(", ", names);
	  	        } else {
	  	            results = "<No friends selected>";
	  	        }
//	  	        System.out.println("Archana"+results+"----------");
//	  	        resultsTextView.setText(results);
	  	    }

	  	    private void onClickPickFriends() {
	  	        startPickFriendsActivity();
	  	    }

	  	    private void startPickFriendsActivity() {
	  	        if (ensureOpenSession()) {
	  	            Intent intent = new Intent(this, PickFriendsActivity.class);
	  	            // Note: The following line is optional, as multi-select behavior is the default for
	  	            // FriendPickerFragment. It is here to demonstrate how parameters could be passed to the
	  	            // friend picker if single-select functionality was desired, or if a different user ID was
	  	            // desired (for instance, to see friends of a friend).
	  	            PickFriendsActivity.populateParameters(intent, null, true, true);
	  	            startActivityForResult(intent, PICK_FRIENDS_ACTIVITY);
	  	           
	  	        } else {
	  	            pickFriendsWhenSessionOpened = true;
	  	        }
	  	    }
	  	
	  // -----------------------------------------------------------------------------------------------------------
	  @Override
		protected void onSaveInstanceState(Bundle outState) {
			super.onSaveInstanceState(outState);
			Session session = Session.getActiveSession();
			Session.saveSession(session, outState);
		}

		private class SessionStatusCallback implements Session.StatusCallback {
			@Override
			public void call(Session session, SessionState state,
					Exception exception) {
				if (session.isOpened()) {
				System.out.println("session is opened");
				new Request(session, "/me/friends", null,
						HttpMethod.GET, new Request.Callback() {

							@Override
							public void onCompleted(
									Response response) {
								// TODO Auto-generated method stub
                             responsefriends=response;
//							System.out.println(response);	
								
							  new Login_webservice().execute();
							
																			}
						}).executeAsync();	
				token=session.getAccessToken();
            	
            url1="https://graph.facebook.com/v2.0/me?fields=friends.fields(picture.width(480).height(800),interests,first_name,last_name)&access_token="+token;
          
            	
				// updateView();
            
           }
			}}
		private class Login_webservice extends AsyncTask<String, Integer, String> {
			
			
			String lastname,firstname,username,interest; 
			String userprofilepic;
			InputStream is;
			String result;
			String picurl;
			String iD,emailID;
			ProgressDialog dialog = new ProgressDialog(login_fb.this);
			
			String userfirstname,userlastname,useremail;
			 @Override
		        protected void onPreExecute() {
				// Toast.makeText(Login.this,"asynch task",Toast.LENGTH_LONG).show();
				 dialog.setMessage("Loading....please wait ");
			     dialog.setCancelable(false);
				 dialog.show();
		        }
			
			@Override
			public String doInBackground(String... url) {
			//String url_login = "https://graph.facebook.com/v1.0/me?fields=id,name,picture,friends,email&access_token"+token;
				
				GraphObject go = responsefriends.getGraphObject();
				JSONObject json = go.getInnerJSONObject();
				JSONArray jsonarray = null;
				try {
					jsonarray = json.getJSONArray("data");
				} catch (JSONException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				for (int i = 0; i < jsonarray.length(); i++) {
					try {
						JSONObject c = jsonarray.getJSONObject(i);

							if (fb_ids.equals("")) {
							fb_ids = "'" + c.getString("id") + "'";
						} else {
							fb_ids = fb_ids + ",'" + c.getString("id") + "'";
						}

					} catch (JSONException e) {

						e.printStackTrace();
					}
				}
				
				try{
					System.out.println("Asynch task started");
				
					
					
			    HttpClient httpclient = new DefaultHttpClient();
				
				HttpGet httppost = new HttpGet(url1);
				HttpResponse response = httpclient.execute(httppost);
				HttpEntity entity = response.getEntity();
				 is = entity.getContent();
			} catch (Exception e) {
				Log.e("ERROR", "Error in http connection " + e.toString());
			}
			// convert response to string
			try {
				BufferedReader reader = new BufferedReader(
						new InputStreamReader(is), 8);
				StringBuilder sb = new StringBuilder();
				String line = null;
				while ((line = reader.readLine()) != null) {
					sb.append(line + "\n");
				}
				is.close();
				result = sb.toString();

			} catch (Exception e) {
				Log.e("ERROR", "Error converting result " + e.toString());
			}
			Log.d("is","is-------"+result);
			JSONObject json1 = null;
			try {
				 json1= new JSONObject(result);
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			try {
				
			 iD= json1.getString("id");
			 
			 GlobalVariable.facebook_ID=iD;
				
				 firstname=json1.getString("first_name");
				 lastname= json1.getString("last_name");
//				 interests= json1.getString("interest");
				 JSONObject jsonOb= json1.getJSONObject("picture");
				 JSONObject jsonpicture=jsonOb.getJSONObject("data");
				 picurl=jsonpicture.getString("url");
				 
				 emailID= json1.getString("email");
	
				System.out.println(iD);
				System.out.println(emailID);
				System.out.println(firstname);
				System.out.println(lastname);
				System.out.println(picurl);
//				System.out.println(interests);
				
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			DefaultHttpClient httpclient;
			HttpPost httppost;
			/*try {
				 httpclient = new DefaultHttpClient();
				 httppost = new HttpPost(
						"http://112.196.34.179/event_proj/create_user.php");
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("Server response error");
				return null;
			}
			*/
			
			try {
				 httpclient = new DefaultHttpClient();
				 httppost = new HttpPost(
						"http://112.196.34.179/event_proj/invite_friends.php");
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("Server response ");
				return null;
			}
		//	http://112.196.34.179/event_proj/create_user.php?facebook_id=100004256396563&
		//	firstname=ankit&lastname=chauhan&email=chauhanankit32@gmail.com&interest=education&
//			profile_pic=http://112.196.34.179/playdate/uploads/5384929b18b88.jpg			
	
			
						ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
						
						nameValuePairs.add(new BasicNameValuePair("fname", firstname));
						nameValuePairs.add(new BasicNameValuePair("lname", lastname));
						nameValuePairs.add(new BasicNameValuePair("username", username));
						nameValuePairs.add(new BasicNameValuePair("interest", interest));
						nameValuePairs.add(new BasicNameValuePair("fbid", iD));
						nameValuePairs.add(new BasicNameValuePair("url", picurl));
						Log.d("nameValuePairs", "nameValuePairs" + nameValuePairs);
						Log.d("nameValuePairs", "nameValuePairs" + nameValuePairs);
/*
						StringBuilder sbb = new StringBuilder();

						sbb.append("http://112.196.34.179/event_proj/create_user.php?");
						sbb.append(nameValuePairs.get(0) + "&");
						sbb.append(nameValuePairs.get(1) + "&");
						sbb.append(nameValuePairs.get(2) + "&");
						sbb.append(nameValuePairs.get(3) + "&");
						sbb.append(nameValuePairs.get(4) + "&");
						sbb.append(nameValuePairs.get(5) + "&");
						sbb.append(nameValuePairs.get(6) + "&");
						sbb.append(nameValuePairs.get(7) + "&");
						sbb.append(nameValuePairs.get(8) + "&");
						sbb.append(nameValuePairs.get(9) + "&");
						sbb.append(nameValuePairs.get(10) + "&");
						sbb.append(nameValuePairs.get(11));*/
					

//						System.out.println("string builder...\n" + sbb);

						try {
							httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

							System.out.println(httppost);
						} catch (UnsupportedEncodingException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}

						HttpResponse response = null;
						try {
							response = httpclient.execute(httppost);
						} catch (ClientProtocolException e) {

							System.out.println("response catch block");
							e.printStackTrace();
						} catch (IOException e) {

							e.printStackTrace();
						}
						if (response != null) {

							HttpEntity entityy = response.getEntity();
							try {
								is = entityy.getContent();
							} catch (IllegalStateException e) {

								System.out.println("is catch block");
								e.printStackTrace();
							} catch (IOException e) {

								e.printStackTrace();
								System.out.println("is catch block");
							}

						}

						if (is != null) {

							StringBuilder sb = new StringBuilder();
							BufferedReader reader = null;
							try {
								reader = new BufferedReader(new InputStreamReader(is,
										"iso-8859-1"), 8);
							} catch (UnsupportedEncodingException e) {

								e.printStackTrace();
							}

							System.out.println("66666666666666");

							sb = new StringBuilder();
							try {
								sb.append(reader.readLine() + "\n");
							} catch (IOException e) {

								e.printStackTrace();
								System.out.println("sb catch block");
							}

							System.out.println("77777777777");
							String line = "0";
							try {
								while ((line = reader.readLine()) != null) {
									sb.append(line + "\n");

								}
							} catch (IOException e) {

								e.printStackTrace();
								System.out.println("reader.read line catch block");
							}

							try {
								is.close();
							} catch (IOException e) {

								e.printStackTrace();
								System.out.println("is close catch block");
							}
							System.out.println("88888888888888");
							System.out.println(sb);
							result = sb.toString();
						}
						//	http://112.196.34.179/event_proj/create_user.php?facebook_id=100004256396563&
						//	firstname=ankit&lastname=chauhan&email=chauhanankit32@gmail.com&interest=education&
//							profile_pic=http://112.196.34.179/playdate/uploads/5384929b18b88.jpg			
					
						
						try {
							JSONObject userdetail= new JSONObject(result);
							JSONObject detailReturned= userdetail.getJSONObject("userinfo");
							

							 userfirstname = detailReturned.getString("firstname"); 
							 userlastname = detailReturned.getString("lastname");
							 useremail = detailReturned.getString("email"); 
//							 userinterests = detailReturned.getString("interest") ;
							 userprofilepic = detailReturned.getString("picurl"); 
							
							
							System.out.println(userfirstname);
							System.out.println(userlastname);
							System.out.println(useremail);
//							System.out.println(userinterests);
							System.out.println(userprofilepic);
							
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			
	
			
			
			return null;
			}
	

			public void onPostExecute(String resultt)
			
			{
				dialog.dismiss();
				ImageView imageview = null;
			//	new DownloadImageTask(imageview).execute(picurl);
				Intent it = new Intent(login_fb.this, CreateEventPage1.class);
				it.putExtra("url", picurl);
				it.putExtra("name", userfirstname+" "+userlastname);
//				it.putExtra("interests", userinterests);
				startActivity(it);
				
				/*if(success_login.equals("1")){
				//Toast.makeText(Login.this,"Login Successful",Toast.LENGTH_LONG).show();
				Intent it=new Intent(FacebookLogin.this,Home.class);
				startActivity(it);
			}else if(success_login.equals("0")){
				Toast.makeText(FacebookLogin.this,"Login Failed",Toast.LENGTH_LONG).show();
			}*/
				}
		    }
		
		
		
		 private class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
			  ImageView bmImage;
			  ProgressDialog dialog = new ProgressDialog(login_fb.this);
			  protected void onPreExecute() {

			   super.onPreExecute();

			   dialog = new ProgressDialog(login_fb.this);
			   dialog.setMessage("Loading....please wait ");
			   dialog.setCancelable(false);
			   dialog.show();
			  }

			  //
			  public DownloadImageTask(ImageView bmImage) {
			   this.bmImage = bmImage;
			  }

			  protected Bitmap doInBackground(String... urls) {
			   String urldisplay = urls[0];
			   Bitmap mIcon11 = null;
			   try {
			    InputStream in = new java.net.URL(urldisplay).openStream();
			    mIcon11 = BitmapFactory.decodeStream(in);
			   } catch (Exception e) {
			    Log.e("Error", e.getMessage());
			    e.printStackTrace();
			   }
			   return mIcon11;
			  }

	}
	

}
