package com.example.event_app;

import java.util.ArrayList;
import java.util.Collection;

import com.facebook.AppEventsLogger;
import com.facebook.Session;
import com.facebook.SessionState;
import com.facebook.UiLifecycleHelper;
import com.facebook.model.GraphUser;

import android.content.Intent;
import android.os.Bundle;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.GridView;
import android.widget.TextView;
import android.support.v4.app.FragmentActivity;
import android.text.TextUtils;
import android.view.View;

public class Invite_distance_interest extends FragmentActivity {

	GridView gridView;
	TextView resultsTextView ;
	Button pickFriendsButton ;
    private static final int PICK_FRIENDS_ACTIVITY = 1;
    private UiLifecycleHelper lifecycleHelper;
    boolean pickFriendsWhenSessionOpened;
    
	static final String[] images = new String[] { 
			"A", "B", "C", "D", "E",
			"F", "G", "H", "I", "J",
			"K", "L", "M", "N", "O",
			"P", "Q", "R", "S", "T",
			"U", "V", "W", "X", "Y", "Z"};
	
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.sort_distance_interest);
	
		resultsTextView = (TextView) findViewById(R.id.resultsTextView);
		pickFriendsButton = (Button) findViewById(R.id.pickFriendsButton);
		gridView = (GridView) findViewById(R.id.grid_view);
		
		ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, images);
 
		gridView.setAdapter(adapter);
 
//		gridView.setOnItemClickListener(new OnItemClickListener() {
			/*	public void onItemClick(AdapterView<?> parent, View v,
				int position, long id) {
			   Toast.makeText(getApplicationContext(),
				((TextView) v).getText(), Toast.LENGTH_SHORT).show();*/
		
		pickFriendsButton.setOnClickListener(new View.OnClickListener() {
			  public void onClick(View view) {
	                onClickPickFriends();
	            }
			});
		
		   lifecycleHelper = new UiLifecycleHelper(this, new Session.StatusCallback() {
	            @Override
	            public void call(Session session, SessionState state, Exception exception) {
	                onSessionStateChanged(session, state, exception);
	            }
	        });
	        lifecycleHelper.onCreate(savedInstanceState);

	        ensureOpenSession();
		
	}
	    @Override
	    protected void onStart() {
	        super.onStart();

	        // Update the display every time we are started.
	        displaySelectedFriends(RESULT_OK);
	    }

	    @Override
	    protected void onResume() {
	        super.onResume();

	        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
	        // the onResume methods of the primary Activities that an app may be launched into.
	        AppEventsLogger.activateApp(this);
	    }

	    public void onActivityResult(int requestCode, int resultCode, Intent data) {
	        switch (requestCode) {
	            case PICK_FRIENDS_ACTIVITY:
	                displaySelectedFriends(resultCode);
	                break;
	            default:
	                Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
	                break;
	        }
	    }

	    private boolean ensureOpenSession() {
	        if (Session.getActiveSession() == null ||
	                !Session.getActiveSession().isOpened()) {
	            Session.openActiveSession(this, true, new Session.StatusCallback() {
	                @Override
	                public void call(Session session, SessionState state, Exception exception) {
	                    onSessionStateChanged(session, state, exception);
	                }
	            });
	            return false;
	        }
	        return true;
	    }

	    private void onSessionStateChanged(Session session, SessionState state, Exception exception) {
	        if (pickFriendsWhenSessionOpened && state.isOpened()) {
	            pickFriendsWhenSessionOpened = false;

	            startPickFriendsActivity();
	        }
	    }

	    private void displaySelectedFriends(int resultCode) {
	        String results = "";
	        FriendPickerApplication application = (FriendPickerApplication) getApplication();

	        Collection<GraphUser> selection = application.getSelectedUsers();
	        if (selection != null && selection.size() > 0) {
	            ArrayList<String> names = new ArrayList<String>();
	            for (GraphUser user : selection) {
	                names.add(user.getName());
	            }
	            results = TextUtils.join(", ", names);
	        } else {
	            results = "<No friends selected>";
	        }

	        resultsTextView.setText(results);
	    }

	    private void onClickPickFriends() {
	        startPickFriendsActivity();
	    }

	    private void startPickFriendsActivity() {
	        if (ensureOpenSession()) {
	            Intent intent = new Intent(this, PickFriendsActivity.class);
	            // Note: The following line is optional, as multi-select behavior is the default for
	            // FriendPickerFragment. It is here to demonstrate how parameters could be passed to the
	            // friend picker if single-select functionality was desired, or if a different user ID was
	            // desired (for instance, to see friends of a friend).
	            PickFriendsActivity.populateParameters(intent, null, true, true);
	            startActivityForResult(intent, PICK_FRIENDS_ACTIVITY);
	        } else {
	            pickFriendsWhenSessionOpened = true;
	        }
	    }
		
		
	
		
	
	 
}
